@using System.Configuration
@using SpeCalcDataAccessLayer
@using System.Web.Script.Serialization
@using SpeCalc.Helpers
@using SpeCalcDataAccessLayer
@using SpeCalcDataAccessLayer.Models
@model SpeCalcDataAccessLayer.Models.TenderClaim

@{
    ViewBag.Title = "Карточка заявки";
    Layout = "~/Views/Shared/_Layout.cshtml";
    DateTime mind = new DateTime();
    mind = DateTime.Now.AddDays(2);
    if (DateTime.Now.DayOfWeek == DayOfWeek.Wednesday)
    { mind = DateTime.Now.AddDays(6); }
    if (DateTime.Now.DayOfWeek == DayOfWeek.Thursday)
    { mind = DateTime.Now.AddDays(5); }
    if (DateTime.Now.DayOfWeek == DayOfWeek.Friday)
    { mind = DateTime.Now.AddDays(4); }
    if (DateTime.Now.DayOfWeek == DayOfWeek.Saturday)
    { mind = DateTime.Now.AddDays(4); }
    if (DateTime.Now.DayOfWeek == DayOfWeek.Sunday)
    { mind = DateTime.Now.AddDays(3); }
    string minDate = mind.ToString("MM-dd-yyyy");

    ViewBag.ClaimType = Model.ClaimTypeSysName;
    bool IsTransneft = ViewBag.ClaimType != null && ViewBag.ClaimType == "TRANS";
}

<div>
    <div class="panel panel-default">
        <div class="panel-heading" style="min-height: 70px;">
            <div class="h4 marg-sm">
                <div id="headWithCalc" class="pull-left">
                    Заявка №@Model.Id @Model.Customer<br/>
                    <span>
                        Бюджет @Model.StrSum
                    </span><br />
                    <small>@Model.ClaimStatusName</small>
                </div>
                
                <div class="pull-left" style="padding-left: 10px">
                    @if (Model.StateCanAddPositions)
                    {
                        <button type="button" id="butSetClaimOnWork" style="" class="btn btn-success btn-lg" href=""><i class="fa fa-mail-forward"></i> в работу</button>
                    }
                    else
                    {
                        if (Model.StateCanStart)
                        {
                             <button id="btnSetClaimContinue" type="button" class="btn btn-success btn-sm"><i class="fa fa-play"></i> возобновить</button>
                        }
                        if (Model.StateCanPause)
                        {
                            <button id="btnSetClaimPause" type="button" class="btn btn-warning btn-sm"><i class="fa fa-pause"></i> приостановить</button>
                        }
                        if (Model.StateCanStop)
                        {
                            <button id="btnSetClaimStop" type="button" class="btn btn-danger btn-sm"><i class="fa fa-stop"></i> отменить</button>
                        }
                        if (Model.StateCanConfirmPositions)
                        {
                                <button id="butSetPositionConfirm" type="button" class="btn btn-success btn-lg"><i class="fa fa-check"></i> принять расчет</button>
                        }
                    }
                </div>
                <div class=" pull-right">
                    <blockquote class="alert-info">
                        @Model.ClaimTypeName
                    </blockquote>
                </div>
            </div>
        </div>
        <div class="panel-body">
            @*info col 1*@
            <div type="pnlClaimFormWithCalc" class="col-sm-4">
                <table class="table table-condensed pad-xs">
                    <tr>
                        <td class="text-right">Тип сделки</td>
                        <td><strong id="claimDealType">@Model.DealTypeName</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right">Дата начала</td>
                        <td><strong id="claimTenderStart">@Model.TenderStartString</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right">Срок сдачи</td>
                        <td><strong id="claimDeadline">@Model.ClaimDeadlineString</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right">Срок подачи КП</td>
                        <td><strong id="kPDeadline">@Model.KPDeadlineString</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right">Менеджер</td>
                        <td><strong id="claimManager">@Model.Manager.ShortName</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right"><span>Подразделение</span></td>
                        <td><span id="managerSubDivision">@Model.Manager.SubDivision</span></td>
                    </tr>
                    <tr>
                        <td class="text-right"><span>Руководитель</span></td>
                        <td><span id="managerChief">@Model.Manager.ChiefShortName</span></td>
                    </tr>
                    <tr>
                        <td class="text-right">Файлы заявки</td>
                        <td>
                            <div id="claimFileList">
                                @foreach (var file in Model.Files)
                                {
                                    <div>
                                        <a href="@Url.Action("GetTenderClaimFile", "Calc")?guid=@file.FileGuid" target="_blank">@file.FileName</a>
                                    </div>
                                }
                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td class="text-right"></td>
                        <td>
                            @using (Html.BeginForm("SaveFile", "Claim", new { claimId = Request.QueryString["claimId"], cv = Request.QueryString["cv"] }, FormMethod.Post, new { enctype = "multipart/form-data" }))
                            {
                                <div class="pull-left">
                                    <input type="file" name="file" multiple="multiple" accept="@ConfigurationManager.AppSettings["FileFormat4TenderClaimFile"]" />
                                    <input type="text" class="hidden" name="formClaimId" id="formClaimId" />
                                </div><div class="pull-left">
                                    <button class="btn btn-success btn-xs" type="submit">сохранить файл</button>
                                </div>

                            }
                        </td>
                    </tr>
                    <tr>
                        <td class="text-right">Сертификаты</td>
                        <td>
                            <div id="certList">
                                @foreach (var file in Model.Certs)
                                {
                                    <div>
                                        <a href="@Url.Action("GetCertFile", "Calc")?guid=@file.FileGuid" target="_blank">@file.FileName</a>
                                    </div>
                                }
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
            @*info col 2*@
            <div type="pnlClaimFormWithCalc" class="col-lg-4">
                <table class="table table-condensed pad-xs">
                    <tr>
                        <td class="text-right">№ конкурса</td>
                        <td><strong id="claimTenderNumber">@Model.TenderNumber</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right">Статус конкурса</td>
                        <td><strong id="claimTenderStatus">@Model.TenderStatusName</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right">Срок поставки</td>
                        <td><strong id="claimDeliveryDate">@Model.DeliveryDateString</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right">Место поставки</td>
                        <td><strong id="claimDeliveryPlace">@Model.DeliveryPlace</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right">Дата аукциона</td>
                        <td><strong id="claimAuctionDate">@Model.AuctionDateString</strong></td>
                    </tr>
                    <tr>
                        <td class="text-right text-nowrap">Ссылка на закупки</td>
                        <td><small id="claimTenderUrl">@Model.TenderUrl</small></td>
                    </tr>
                </table>
            </div>
            @*История*@
            <div class="col-lg-4">
                <h4 class="marg-sm">История заявки</h4>
                <div>
                    <ul class="list-group small" id="claimStatusHistoryContainer"></ul>
                </div>
                <div id="commentPanel">

                    @if (!Model.StateCanAddPositions)
                    {
                        <textarea id="comment" rows="2" placeholder="Введите текст комментария" class="form-control input-sm"></textarea>
                        <div>
                            @*<button type='button' class='btn btn-danger'><i class="fa fa-remove"></i> отклонить</button>*@
                            @*<button type='button' id="butSendOnConfirm" class='btn btn-success'><i class="fa fa-bullhorn"></i> на подтверждение</button>*@
                            <button type="button" id="butSendComment" class="btn btn-warning btn-xs pull-right"><i class="fa fa-comment"></i> сохранить комментарий</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <div id="positionPanel" style="margin-left: 4px; margin-right: 4px;">
        @if (Model.StateCanAddPositions)
        {
            <P class="marg-sm">
                <blockquote class="bg-warning pad-sm marg-sm">
                    Каждая номенклатурная позиция должна оформляться отдельной строкой!
                </blockquote>
            </P>
            <p class="marg-sm">
                <blockquote class="bg-warning pad-sm marg-sm">
                    При загрузке спецификации удостоверьтесь, что в ячейках нет формул!
                </blockquote>
            </p>
        }
        <div>
            @*Позиции*@
            @if (Model.StateIsActive && Model.HasStateProductCanceled)
            {
                <div>
                    <ul class="list-inline">
                        <li>
                            <h4>Отклонены продактом</h4>
                        </li>
                        <li>
                            <button id="butSetPositionOnWork" type="button" class="btn btn-success btn-sm"><i class="fa fa-mail-forward"></i> В работу отмеченные</button>
                        </li>
                        <li>
                            <button id="butDeleteSelected" type="button" class="btn btn-danger btn-sm"><i class="fa fa-trash"></i> удалить отмеченные</button>
                        </li>
                    </ul>

                    <table class="table table-bordered small">
                        <thead>
                        <tr class="bg-primary">
                            <th class=" text-center">
                                <input type="checkbox" id="cancelCheckAll"/>
                            </th>
                            <th style="width: 10%">Каталожный номер</th>
                            <th style="width: 30%">Наименование</th>
                            <th style="width: 5%">Количество</th>
                            <th style="width: 10%">Единица</th>
                            <th style="width: 10%">Продакт/Снабженец</th>
                            <th style="width: 25%">Комментарий</th>
                            <th></th>
                        </tr>
                        </thead>
                        <tbody id="cancelPositionsContainer"></tbody>
                    </table>
                </div>
            }
            @if (!Model.StateCanAddPositions) { 
                <ul class="list-inline">
                    <li>
                        <h4>Все позиции</h4>
                    </li>
                    <li>
                        <span class="label label-default">всего&nbsp;<span class="big" id="positionCountLabel">@Model.PositionsCount</span></span>
                        <span class="label label-info">из них рассчитано&nbsp;<span class="big" id="positionCalculateCountLabel">@Model.CalculatePositionsCount</span></span>
                    </li>
                    <li>
                        @if (IsTransneft)
                        {
                            <a  href="@Url.Action("GetSpecificationFileOnlyCalculationTrans")?claimId=@Model.Id&cv=@Request.QueryString["cv"]" target="_blank" class="btn btn-default btn-sm"><i class="fa fa-download"></i> скачать расчет</a>
                        }
                        else
                        {
                            <a id="butGetCalculateOnlyCalculateFile" href="@Url.Action("GetSpecificationFileOnlyCalculation")?claimId=@Model.Id&cv=@Request.QueryString["cv"]" target="_blank" class="btn btn-default btn-sm"><i class="fa fa-download"></i> скачать расчет</a>
                        }
                    </li>
                    @if (Model.StateCanDiscartPositions)
                    {

                        <li>
                            <button id="butSetPositionReject" type="button" class="btn btn-danger btn-sm"><i class="fa fa-close"></i> отклонить отмеченные</button>
                        </li>
                    }
                    @if (Model.StateCanCallRejectPositions)
                    {
                        <li>
                            <button id="askReject" class="btn btn-danger btn-sm"><i class="fa fa-mail-reply"></i> Запросить отклонение для отмеченных</button>
                        </li>
                    }
                    @if (DateTime.Now > new DateTime(2015, 10, 2) && Model.StateIsEnd)
                    {
                        <li>
                            <button id="goActual" class="btn btn-success btn-sm"><i class="fa fa-mail-forward"></i> Актуализировать отмеченные</button>
                        </li>
                    }
                    @if (Model != null && Model.Id > 0)
                    {
                        int[] versions = DbEngine.GetCalcVersionList(Model.Id);

                        <li class="pull-right" style="background-color: #F7ECB5">
                            <ul class="list-inline">
                                <li class="bold"><h4>Версия</h4></li>
                                @if (versions != null)
                                {
                                    foreach (int ver in versions)
                                    {
                                        <li><a class="btn-sm btn @(Request.QueryString["cv"] != null && Request.QueryString["cv"].Equals(ver.ToString()) ? "btn-danger selected" : "btn-primary")" href="@Url.Action("Index", new {claimId = Model.Id, cv = ver})">@ver</a></li>
                                    }
                                }
                            </ul>
                        </li>
                    }
                </ul>
                <table id="tblPositionsWithCalc" class="table small table-bordered">
                    <thead>
                    @Html.Partial("CalcPositionHeader")
                    </thead>
                    <tbody id="calcPositionsContainer"></tbody>
                </table>
            }

            @if (Model.StateCanAddPositions)
            {
                <div>
                    <ul class="list-inline">
                        <li>
                            <span>
                                Список позиций
                                <span class="label label-default">всего&nbsp;<span class="big" id="positionCountLabel">@Model.PositionsCount</span></span>
                                <span class="label label-info">из них рассчитано&nbsp;<span class="big" id="positionCalculateCountLabel">@Model.CalculatePositionsCount</span></span>
                            </span>
                        </li>

                        <li>
                            @if (IsTransneft)
                            {
                                <a id="butGetFile" href="@Url.Action("GetSpecificationFileTrans")?claimId=@Model.Id" target="_blank" class="btn btn-default btn-sm"><i class="fa fa-download"></i> скачать шаблон</a>
                            }
                            else
                            {
                                <a id="butGetFile" href="@Url.Action("GetSpecificationFile")?claimId=@Model.Id" target="_blank" class="btn btn-default btn-sm"><i class="fa fa-download"></i> скачать шаблон</a>
                            }
                        </li>
                        <li>
                            @Html.HiddenFor(m => m.Id)
                            <div class="fileUpload btn btn-default btn-sm">
                                <span><i class="fa fa-upload"></i> загрузить спецификацию</span>
                                <input type="file" name="file" id="txtUploadFile" class="upload" accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"/>
                            </div>
                        </li>
                        <li>
                            <button id="butDeleteSelected" type="button" class="btn btn-danger btn-sm"><i class="fa fa-trash"></i> удалить отмеченные</button>
                        </li>
                    </ul>
                    <table class="table table-bordered small">
                        <tbody>
                            @Html.Partial("NewPositionAdd")
                        </tbody>
                        <tbody>
                            @Html.Partial("NewPositionHeader")
                        </tbody>
                        <tbody id="newPositionsContainer"></tbody>
                    </table>
                </div>
}
        </div>

    <div id="deadLineCorrectorBox" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Срок для расчета не может быть менее 2 суток</h4>
                </div>
                <div class="modal-body">
                    <div class="row">
                        @*<label class="col-sm-9 control-label required-mark">Срок сдачи расчета</label>*@
                        <div class="col-lg-5">
                            <input type="text" id="deadlineCorrector" style="cursor: pointer;" class="form-control datepicker-btn" placeholder="Срок сдачи расчета"/>

                        </div>

                        @*<span id="deadlineLabelCorrector" style="" class="form-control"></span>*@
                    </div>
                    <small>не менее 2 рабочих дней</small>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                    <button id="butDeadLineCorrect" type="button" class="btn btn-primary">Продолжить</button>
                </div>
            </div>
        </div>
    </div>
        <div id="stateChangeCommentModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">Укажите комментарий</h4>
                    </div>
                    <div class="modal-body">
                        <textarea id="stateChangeComment" class="form-control" rows="7" placeholder="Комментарий"></textarea>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
                        <button id="stateChangeConfirm" type="button" class="btn btn-success">Подтвердить</button>
                    </div>
                </div>
            </div>
        </div>
    <div id="rejectPositionCommentBox" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Комментарий к отклонению</h4>
                </div>
                <div class="modal-body">
                    <textarea id="rejectPositionComment" class="form-control" rows="7" placeholder="Комментарий"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Не отклонять</button>
                    <button id="butRejectPositionOk" type="button" class="btn btn-success">Подтвердить отклонение</button>
                </div>
            </div>
        </div>
    </div>
        <div id="allHistoryModal" class="modal fade">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                        <h4 class="modal-title">История заявки</h4>
                    </div>
                    <div class="modal-body">
                        <div id="allHistoryContainer"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Закрыть</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section scripts
{
    <script type="text/javascript">


        $(function() {
            $('#saveNew').click(saveNew);
            $('#butDeleteSelected').click(function() {
                if (!confirm('Вы действиетльно хотите удалить выбранные позиции?'))return;
                showSpinnerAppendAndDisable(this);
                deleteNewSelectedPositions();
            });
            $('#Newcancel').click(function() {
                clearNewFields();
            });
            $('#newCheckAll').click(function() {
                $('[name="newCheckbox"]').prop('checked', $(this).is(':checked'));
            });
            $('#cancelCheckAll').click(function() {
                $('[name="newCheckbox"]').prop('checked', $(this).is(':checked'));
            });
            $('#calcPositionsCheckAll').click(function() {
                $('[name="calcCheckbox"]').prop('checked', $(this).is(':checked'));
            });
            $('#butSetClaimOnWork').click(setClaimOnWork);
            $("#butSendComment").click(sendComment);
            $('#btnSetClaimContinue').click(SetClaimContinue);
            $('#btnSetClaimPause').click(SetClaimPause);
            $('#btnSetClaimStop').click(SetClaimStop);
            $('#butSetPositionOnWork').click(setPositionOnWork);
            $('#butSetPositionReject').click(setPositionReject);
            $('#butSetPositionConfirm').click(setPositionConfirm);
            $('#goActual').click(goActual);
            $('#askReject').click(askReject);

            loadHistory();
            //loadrejectedPositions();
            loadNewPositions();
            loadCalcPositions();
            loadCancelPositions();
        });

        function askReject() {

            var $this = $(this);
            var $cont = $('#calcPositionsContainer');
            var ids = getCheckedIds($cont, 'calcCheckbox');
            if (ids.length <= 0) {
                alert("Ни одной позиции не выбрано!");
                return;
            }
            if (!confirm('Вы уверены что хотите запросить оклонение позиций?'))return;
            showSpinnerAppendAndDisable($this);
            $.ajax({
                url: '@Url.Action("AskPositionReject")',
                method: 'POST',
                datatype: 'json',
                data: JSON.stringify({ posIds: ids, idClaim: @Model.Id, cv: '@Request.QueryString["cv"]' }),
                contentType: 'application/json;charset=utf-8 ',
                success: function() {
                    location.reload();
                },
                error: function() {
                    alert('Ошибка при выполнении запроса!');
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        function goActual() {
            var $this = $(this);
            var $cont = $('#calcPositionsContainer');
            var ids = getCheckedIds($cont, 'calcCheckbox');
            if (ids.length <= 0) {
                alert("Ни одной позиции не выбрано!");
                return;
            }

            showSpinnerAppendAndDisable($this);
            $.ajax(
            {
                url: '@Url.Action("GoActual")',
                method: 'POST',
                dataType: 'json',
                data: JSON.stringify({ selIds: ids, claimId: @Model.Id, cv: @Request.QueryString["cv"] }),
                processData: false,
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    window.location = "@Url.Action("Index")?claimId=" + data.claimId + "&cv=" + data.newVersion;
                    hideSpinnerAndEnabled($this);
                },
                error: function(error) {
                    alert('Ошибка при переводе на актуализацию!');
                    messageUi.progressHide();
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        function setPositionConfirm() {
            var $this = $(this);
            showSpinnerAppendAndDisable($this);

            $.ajax({
                url: '@Url.Action("SetClaimAllPositonConfirmed")',
                method: 'GET',
                data: { idClaim: @Model.Id, cv: @Request.QueryString["cv"] },
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    location.reload();
                    hideSpinnerAndEnabled($this);
                },
                error: function() {
                    alert('Ошибка при принятии позиций!');
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        function setPositionReject() {
            var $cont = $('#calcPositionsContainer');
            var ids = getCheckedIds($cont, 'calcCheckbox');
            if (ids.length <= 0) {
                alert("Ни одной позиции не выбрано!");
                return;
            }

            $('#rejectPositionCommentBox').modal('show');
            $('#butRejectPositionOk').click(function() {
                var $this = $(this);

                var comment = $("#rejectPositionComment").val().trim();
                if (!comment) {
                    alert('Укажите комментарий!');
                    return;
                }
                showSpinnerAppendAndDisable($this);
                $.ajax({
                    url: '@Url.Action("SetPositonRejected")', // "/Claim/SetPositonRejected?comment=" + encodeURI(comment) + "&idClaim=" + claim.Id+"&cv=",
                    method: 'POST',
                    dataType: 'json',
                    data: JSON.stringify({ positionsId: ids, idClaim: @Model.Id, cv: @Request.QueryString["cv"], comment: comment }),
                    processData: false,
                    contentType: 'application/json; charset = utf-8 ',
                    success: function(data) {
                        loadHistory();
                        loadCalcPositions();
                        loadCancelPositions();
                        hideSpinnerAndEnabled($this);
                        $('#rejectPositionCommentBox').modal('hide');
                    },
                    error: function() {
                        alert('Ошибка при отклонении позиций!');
                        hideSpinnerAndEnabled($this);
                        $('#rejectPositionCommentBox').modal('hide');
                    }
                });
            });
        }

        function getCheckedIds($container, name) {
            var ids = [];
            var checks = $('[name="' + name + '"]:checked', $container);
            for (var i = 0; i < checks.length; i++) {
                ids.push($(checks[i]).val());
            }
            return ids;
        }

        function setPositionOnWork() {
            var $this = $(this);
            var $cont = $('#cancelPositionsContainer');
            var ids = getCheckedIds($cont, 'newCheckbox');
            if (ids.length <= 0) {
                alert("Ни одной позиции не выбрано!");
                return;
            }
            showSpinnerAppendAndDisable($this);
            $.ajax({
                url: '@Url.Action("SendPositonOnWork")', //"/Claim/SendPositonOnWork?comment=" + encodeURI(comment) + "&idClaim=" + claim.Id+"&cv=,
                method: 'POST',
                dataType: 'json',
                data: JSON.stringify({ positionsId: ids, idClaim: @Model.Id, cv: @Request.QueryString["cv"], comment: null }),
                processData: false,
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    loadHistory();
                    loadCalcPositions();
                    loadCancelPositions();
                    hideSpinnerAndEnabled($this);
                },
                error: function() {
                    alert('Ошибка при передаче позиций!');
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        function loadCancelPositions() {
            var $cont = $('#cancelPositionsContainer');
            $cont.html('');
            showSpinner($cont);
            $.ajax({
                url: '@Url.Action("GetCancelPositions")',
                method: 'GET',
                data: { claimId: @Model.Id, cv: @Request.QueryString["cv"] },
                success: function(html) {
                    $cont.html(html);
                    initNewPositionBtns();
                    hideSpinner($cont);
                },
                error: function() {
                    alert('Ошибка загрузки позиций!');
                    hideSpinner($cont);
                }
            });
        }

        function SetClaimPause() {
            //if (!confirm('Вы уверены что хотите приостановить заявку?'))return;
            $('#stateChangeCommentModal').modal('show');

            $('#stateChangeConfirm').click(function() {
                showSpinnerAppendAndDisable(this);
                var Comment = $('#stateChangeComment').val();

                $.ajax({
                    url: '@Url.Action("SetClaimStopped")',
                    method: 'POST',
                    contentType: "application/json",
                    data: JSON.stringify({ IdClaim: @Model.Id, Comment: Comment, Version: @Request.QueryString["cv"] }),
                    success: function() {
                        location.reload();
                        hideSpinnerAndEnabled();
                    },
                    error: function() {
                        alert('Ошибка при переводе заявки на паузу!');
                        hideSpinnerAndEnabled();
                    }
                });
            });
        }

        function SetClaimContinue() {
            var minDate = new Date('@minDate');
            var curDate = new Date('@Model.ClaimDeadline.ToString("MM-dd-yyyy")');
            if (curDate < minDate) {
                $("#deadlineCorrector").datepicker({
                    format: "dd.mm.yyyy",
                    autoclose: true,
                    language: "ru",
                    startDate: minDate
                });
                //$('#deadlineCorrector').datepicker("setStartDate", minDate);
                $('#deadLineCorrectorBox').modal("show");
                $('#butDeadLineCorrect').click(function() {
                    var date = $('#deadlineCorrector').val();
                    confirmSetClaimContinue(date, this);
                });
            } else {
                confirmSetClaimContinue(null);
            }
        }

        function confirmSetClaimContinue(deadlineDate, btn) {

            $('#stateChangeCommentModal').modal('show');
            $('#stateChangeConfirm').click(function() {
                showSpinnerAppendAndDisable(btn);
                var Comment = $('#stateChangeComment').val();
                $.ajax({
                    url: '@Url.Action("SetClaimContinued")',
                    method: 'POST',
                    contentType: "application/json",
                    data: JSON.stringify({ IdClaim: @Model.Id, Comment: Comment, Version: @Request.QueryString["cv"], deadlineDate: deadlineDate }),
                    success: function() {
                        location.reload();
                        hideSpinnerAndEnabled();
                    },
                    error: function() {
                        alert('Ошибка при переводе заявки в работу!');
                        hideSpinnerAndEnabled();
                    }
                });
            });
        }

        function setClaimOnWork() {
            var minDate = new Date('@minDate');
            var deadlineDate = new Date('@Model.ClaimDeadline.ToString("M-dd-yyyy")');
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            if (deadlineDate < minDate) {
                $("#deadlineCorrector").datepicker({
                    format: "dd.mm.yyyy",
                    autoclose: true,
                    language: "ru",
                    startDate: minDate
                });
                $('#deadLineCorrectorBox').modal("show");
                $('#butDeadLineCorrect').click(function() {
                    var date = $('#deadlineCorrector').val();
                    confirmSetClaimOnWork(date, this);
                });
            } else {
                confirmSetClaimOnWork(null);
            }
        }

        function confirmSetClaimOnWork(deadlineDate, btn) {
            showSpinnerAppendAndDisable(btn);

            $.ajax({
                url: '@Url.Action("SetClaimOnWork")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ id: @Model.Id, cv: @Request.QueryString["cv"], deadlineDate: deadlineDate }),
                success: function() {
                    location.reload();
                    hideSpinnerAndEnabled();
                },
                error: function() {
                    alert('Ошибка при переводе заявки в работу!');
                    hideSpinnerAndEnabled();
                }
            });
        }

        function SetClaimStop() {
            $('#stateChangeCommentModal').modal('show');
            $('#stateChangeConfirm').click(function() {
                showSpinnerAppendAndDisable(this);
                var Comment = $('#stateChangeComment').val();
                $.ajax({
                    url: '@Url.Action("SetClaimCancelled")',
                    method: 'POST',
                    contentType: "application/json",
                    data: JSON.stringify({ IdClaim: @Model.Id, Comment: Comment, Version: @Request.QueryString["cv"] }),
                    success: function() {
                        location.reload();
                        hideSpinnerAndEnabled();
                    },
                    error: function() {
                        alert('Ошибка при остановке заявки!');
                        hideSpinnerAndEnabled();
                    }
                });
            });

        }

        function setB2bPrice($container) {
            if (!$container) $container = $('#calcPositionsContainer');

            var $elems = $('[name="priceOnlineInfo"]', $container);

            for (var i = 0; i < $elems.length; i++) {
                var $elem = $($elems[i]);
                var partNum = $elem.attr('catnum');
                if (!partNum)continue;

                (function(i) {
                    var $elem = $($elems[i]);
                    var partNum = $elem.attr('catnum');
                    var minPriceOnline = '';
                    $.ajax({
                        url: '@Url.Action("GetMinPrice", "Claim")',
                        method: 'POST',
                        data: { partNum: partNum },
                        success: function(data) {
                            minPriceOnline = data.priceStr;
                            $elem.text = minPriceOnline;
                        },
                        error: function() {
                            var error = 'Не удалось получить цену!';
                        }
                    });
                })(i);
            }
        }

        function loadCalcPositions() {
            var $cont = $('#calcPositionsContainer');
            $cont.html('');
            showSpinner($cont);
            $.ajax({
                url: '@Url.Action("GetCalcPositions")',
                method: 'GET',
                data: { claimId: @Model.Id, cv: @Request.QueryString["cv"], ClaimType: '@ViewBag.ClaimType' },
                success: function(html) {
                    $cont.html(html);
                    setB2bPrice($cont);
                    //fillCount();
                    //initNewPositionBtns();
                    hideSpinner($cont);
                },
                error: function() {
                    alert('Ошибка загрузки позиций!');
                    hideSpinner($cont);
                }
            });
        }

        //function loadCalculations() {
        //    var rows = $('[name="calcpos"]');

        //    for (var i = 0; i < rows.length; i++) {
        //        var $row = $(rows[i]);
        //        var pid = $row.attr('pid');
        //    }
        //}

        function saveNew() {
            var CatalogNumber = $('#newcatalogNumberValue').val();
            var Name = $('#newnameValue').val();
            var Value = $('#newvalueValue').val();
            var Unit = $('#newUnit').val();
            var UnitName = $('#newUnit :selected').text();
            var ProductManagerId = $('#newProd').val();
            var ProductManagerName = $('#newProd :selected').text();
            var Comment = $('#newcommentValue').val();
            var error = '';
            if (!Name)error = error + 'поле Наименование';
            if (Value == null || Value == '')error = error + '\rполе Количество';
            if (!Unit)error = error + '\rполе Единица';
            if (!ProductManagerId)error = error + '\rполе Снабженец';

            if (error.length > 0) {
                error = error + '\rнекорректно заполнены! Отмена сохранения!';
                alert(error);
                return;
            }
            showSpinnerAppendAndDisable(this);
            $.ajax({
                url: '@Url.Action("AddPosition")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ IdClaim: @Model.Id, ProductManagerName: ProductManagerName, UnitName: UnitName, CatalogNumber: CatalogNumber, Name: Name, Value: Value, Unit: Unit, ProductManagerId: ProductManagerId, Comment: Comment }),
                success:

            function(html) {
                $('#newPositionsContainer').append(html);
                fillCount();
                clearNewFields();
                initNewPositionBtns();
                hideSpinnerAndEnabled();
            },
                error: function() {
                    alert('Ошибка при сохранении позиции');
                    hideSpinnerAndEnabled();
                }
            });
        }

        function showHistoryAll() {
            var $cont = $('#allHistoryContainer');
            $('#allHistoryModal').modal('show');
            showSpinner($cont);
            $.ajax({
                url: '@Url.Action("GetClaimHistory")',
                method: 'POST',
                data: { id: @Model.Id, full: true },
                success: function(html) {
                    $cont.html(html);
                    hideSpinner($cont);
                },
                error: function() {
                    alert('Ошибка загрузки истории!');
                    hideSpinner($cont);
                }
            });
        }

        function sendComment(e) {
            var comment = $("#comment").val().trim();
            if (!comment) return;
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            //comment = encodeURI(comment);
            $.ajax({
                url: '@Url.Action("AddCommentToClaim")',
                method: 'POST',
                dataType: 'json',
                data: { idClaim: @Model.Id, comment: comment, cv: '@Request.QueryString["cv"]' },
                //contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    messageUi.progressHide();
                    if (data.IsComplete) {
                        if (data.Model != null) {
                            loadHistory();
                        }
                        $("#comment").val("");
                        hideSpinnerAndEnabled($this);
                    } else {
                        alert("Ошибка при добавлении комментария");
                        hideSpinnerAndEnabled($this);
                    }
                },
                error: function(data) {
                    alert("Ошибка с добавления комментария");
                    hideSpinnerAndEnabled($this);
                }
            });
        }

        $('#txtUploadFile').on('change', function(e) {

            var files = e.target.files;
            if (files.length > 0) {
                if (window.FormData !== undefined) {
                    var data = new FormData();
                    for (var x = 0; x < files.length; x++) {
                        data.append("file" + x, files[x]);
                    }
                    showSpinnerAppendAndDisable($(this).parent('.btn'));
                    $.ajax({
                        type: "POST",
                        @if (IsTransneft)
                        {
                            <text>
                        url: '@Url.Action("UploadFileFormTrans")?claimId=' + @Model.Id,
                        </text>
                        }
                        else
                        {
                            <text>
                        url: '@Url.Action("UploadFileForm")?claimId=' + @Model.Id,
                        </text>
                        }
                        contentType: false,
                        processData: false,
                        data: data,
                        success: function(data) {
                            if (data.error) {
                                if (confirm(data.message.replace(/<br\s*[\/]?>/gi, "\n"))) {
                                    savePoistions(data.positions);
                                } else {
                                }
                            } else {
                                savePoistions(data.positions);
                                alert(data.message.replace(/<br\s*[\/]?>/gi, "\n"));
                            }
                            hideSpinnerAndEnabled();
                            $('#txtUploadFile').val('');
                        },
                        error: function(xhr, status, p3, p4) {
                            var err = "Error " + " " + status + " " + p3 + " " + p4;
                            if (xhr.responseText && xhr.responseText[0] == "{")
                                err = JSON.parse(xhr.responseText).Message;
                            console.log(err);
                            hideSpinnerAndEnabled();
                            $('#txtUploadFile').val('');
                        }
                    });
                } else {
                    alert("This browser doesn't support HTML5 file uploads!");
                }
            }
        });


        function fillCount() {
            var count = 0;
            var newcount = $('#newPositionsContainer [name="newpos"]').length;
            //var calccount = $('#calcPositionsContainer [name="calcpos"]').length;
            count = newcount; // + calccount;
            $('#positionCountLabel').text(count);
        }

        function deleteNewSelectedPositions() {

            var selectedRows = $('[name="newCheckbox"]:checked');

            if (selectedRows.length > 0) {
                var ids = [];
                for (var i = 0; i < selectedRows.length; i++) {
                    ids.push($(selectedRows[i]).val());
                }
                $.ajax({
                    url: '@Url.Action("DeleteClaimPositions")',
                    method: 'POST',
                    contentType: 'application/json; charset = utf-8 ',
                    dataType: "json",
                    data: JSON.stringify(ids),
                    success: function(data) {
                        if (data.IsComplete) {
                            for (var i = 0; i < ids.length; i++) {
                                $('#newpos-' + ids[i]).remove();
                            }
                        } else {
                            alert("Не удалось удалить все записи из БД");
                        }
                        hideSpinnerAndEnabled();
                        fillCount();
                    }
                });
            } else {
                alert('Ничего не выбрано!');
                hideSpinnerAndEnabled();
                return;
            }
        }


        function savePoistions(positions) {
            $.ajax({
                url: '@Url.Action("AddClaimPositions")',
                method: 'POST',
                contentType: "application/json",
                data: JSON.stringify({ modelList: positions }),
                success: function(data) {

                    if (data.IsComplete) {
                        loadNewPositions();
                        //alert('Загрузка прошла успешно!');
                    } else {
                        alert('Что-то пошло не так при сохранении. Попробуйте обновить страницу.');
                    }
                }
            });
        }

        function clearNewFields() {
            $('#newcatalogNumberValue').val('');
            $('#newnameValue').val('');
            $('#newvalueValue').val('');
            $('#newUnit').val('');
            $('#newProd').val('');
            $('#newcommentValue').val('');
        }

        function loadNewPositions() {
            showSpinner($('#newPositionsContainer'));
            $.ajax({
                url: '@Url.Action("GetNewPositions")',
                method: 'GET',
                data: { claimId: @Model.Id, cv: @Request.QueryString["cv"], ClaimType:'@ViewBag.ClaimType' },
                success: function(html) {
                    $('#newPositionsContainer').html(html);
                    //fillCount();
                    initNewPositionBtns();

                    hideSpinner($('#newPositionsContainer'));
                },
                error: function() {
                    alert('Ошибка загрузки позиций!');
                    hideSpinner($('#newPositionsContainer'));
                }
            });
        }

        function initNewPositionBtns() {
            $('[name="newEdit"]').click(function() {
                var id = $(this).attr('cid');
                $.ajax({
                    url: '@Url.Action("GetNewPositionEdit")',
                    method: 'POST',
                    data: { id: id },
                    success: function(html) {
                        $('#newpos-' + id).replaceWith(html);
                        initNewPositionBtns();
                    },
                    error: function() {
                        alert('Ошибка при загрузке формы редактирования');
                    }
                });
            });

            $('[name="newEditCancel"]').click(function() {
                var id = $(this).attr('cid');
                $.ajax({
                    url: '@Url.Action("GetNewPosition")',
                    method: 'POST',
                    data: { id: id },
                    success: function(html) {
                        $('#newpos-' + id).replaceWith(html);
                        initNewPositionBtns();
                    },
                    error: function() {
                        alert('Ошибка при сохранении позиции');
                        hideSpinnerAndEnabled();
                    }
                });
            });

            $('[name="newEditSave"]').click(function() {
                var id = $(this).attr('cid');
                var $row = $('#newpos-' + id);
                var CatalogNumber = $('[name="newcatalogNumberValue"]', $row).val();
                var Name = $('[name="newnameValue"]', $row).val();
                var Value = $('[name="newvalueValue"]', $row).val();
                var Unit = $('[name="newUnit"]', $row).val();
                var UnitName = $('[name="newUnit"]', $row).find(':selected').text();
                var ProductManagerId = $('[name="newProd"]', $row).val();
                var ProductManagerName = $('[name="newProd"]', $row).find(':selected').text();
                var Comment = $('[name="newcommentValue"]', $row).val();
                var error = '';
                if (!Name)error = error + 'поле Наименование';
                if (Value == null || Value == '')error = error + '\rполе Количество';
                if (!Unit)error = error + '\rполе Единица';
                if (!ProductManagerId)error = error + '\rполе Снабженец';

                if (error.length > 0) {
                    error = error + '\rнекорректно заполнены! Отмена сохранения!';
                    alert(error);
                    return;
                }
                showSpinnerAppendAndDisable(this);
                $.ajax({
                    url: '@Url.Action("EditClaimPosition")',
                    method: 'POST',
                    data: { Id: id, IdClaim: @Model.Id, ProductManagerName: ProductManagerName, UnitName: UnitName, CatalogNumber: CatalogNumber, Name: Name, Value: Value, Unit: Unit, ProductManagerId: ProductManagerId, Comment: Comment },
                    success: function(html) {
                        $('#newpos-' + id).replaceWith(html);
                        initNewPositionBtns();
                        hideSpinnerAndEnabled();
                    },
                    error: function() {
                        alert('Ошибка при сохранении позиции');
                        hideSpinnerAndEnabled();
                    }
                });
            });
            $('[name="newDelete"]').click(function() {
                if (!confirm('Вы действиетльно хотите удалить выбранные позицию?'))return;
                var id = $(this).attr('cid');
                var ids = [];
                ids.push(id);
                $.ajax({
                    url: '@Url.Action("DeleteClaimPositions")',
                    method: 'POST',
                    contentType: 'application/json;charset=utf-8',
                    dataType: "json",
                    data: JSON.stringify(ids),
                    success: function(data) {
                        if (data.IsComplete) {
                            for (var i = 0; i < ids.length; i++) {
                                $('#newpos-' + ids[i]).remove();
                            }
                        } else {
                            alert("Не удалось удалить все записи из БД");
                        }
                        hideSpinnerAndEnabled();
                        fillCount();
                    }
                });
            });
        }

        @*function loadrejectedPositions() {
            $.ajax({
                url: '@Url.Action("GetClaimRejectedPositions")',
                method: 'POST',
                data: { id: @Model.Id, version: @Request.QueryString["cv"] },
                success: function(html) {
                    $('#rejectedPositions').html(html);
                },
                error: function() {
                    alert('Ошибка загрузки отклоненных позиций!');
                }
            });
        }*@

        function loadHistory() {
            showSpinner($('#claimStatusHistoryContainer'));
            $.ajax({
                url: '@Url.Action("GetClaimHistory")',
                method: 'POST',
                data: { id: @Model.Id, full: false },
                success: function(html) {
                    $('#claimStatusHistoryContainer').html(html);
                    $('#historyMore').click(showHistoryAll);
                    hideSpinner($('#claimStatusHistoryContainer'));
                },
                error: function() {
                    alert('Ошибка загрузки истории!');
                    hideSpinner($('#claimStatusHistoryContainer'));
                }
            });
        }
    </script>
    }