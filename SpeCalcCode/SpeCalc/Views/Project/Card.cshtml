@using SpeCalc.Helpers
@using SpeCalc.Models
@using SpeCalcDataAccessLayer.Models
@model SpeCalcDataAccessLayer.Projects
@{
    ViewBag.Title = "Крточка проекта";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="panel panel-default">
    <div class="panel-heading">
        <ul class="list-inline no-margin">
            <li class="pull-left">
                <h4 class="marg-sm">
                    Крточка проекта №@Model.Id
                </h4>
            </li>
            <li id="conditionContainer">
                
            </li>
            <li class="pull-right">
                <button id="projectPlay" class="btn btn-success"><i class="fa fa-play"></i> запуск</button>
                <button id="projectPause" class="btn btn-warning"><i class="fa fa-pause"></i> приостановить</button>
                <button id="projectStop" class="btn btn-danger"><i class="fa fa-stop"></i> отклонить</button>
            </li>
        </ul>
        @*<ul class="list-inline no-margin">
            <li>
                <div>
                    <strong>@(Model.ClientName)</strong><br />
                    <small>@(Model.Budget.HasValue ? Model.Budget.Value.ToString("F2") : null) @(Model.CurrencyId.HasValue ? Model.ProjectCurrencies.Name : null)</small>
                </div>
            </li>
        </ul>*@
        
    </div>
    <div class="panel-body">
        <div class="row">
            <div class="col-lg-4">
                <h4 class="no-pad">Информация <a id="showInfo" class="btn btn-xs btn-info">вся инфа</a><button id="changeInfo" class="btn btn-warning btn-xs">изменить</button></h4>
                
                <div class="clearfix"></div>
                @Html.Partial("CardInfo", Model)
            </div>
            <div class="col-lg-2">
                <h4 class="no-pad">Файлы <a id="showFilesHistory" class="btn btn-xs btn-info">история</a>
                </h4>
                <div id="filesContainer"></div>
            </div>
            <div class="col-lg-3">
                <h4 class="no-pad">Переписка
                </h4>
                <div>
                    <div class="input-group">
                        <textarea id="message" rows="2" placeholder="Введите комментарий" class="form-control input-sm"></textarea>
                        <div class="input-group-btn">
                            <button type="button" id="sendMessage" class="btn btn-success btn-lg pull-right"><i class="fa fa-comment"></i></button>
                        </div>
                    </div>
                </div>
                <div id="messagesContainer"></div>
            </div>
            <div class="col-lg-3">
                <h4 class="no-pad">Статус
                </h4>
                <div id="historyContainer"></div>
            </div>
        </div>
        <hr/>
        <div>
            <ul class="list-inline">
                @*<li><span class="h4">Расчет</span></li>*@
                <li>
                    <a name="addPosition" class="btn btn-sm btn-warning"><i class="fa fa-plus"></i> добавить оборудование</a>
                </li>
                <li>
                    <a name="addWork" class="btn btn-sm btn-warning"><i class="fa fa-plus"></i> добавить работу</a>
                </li>
                <li>
                    <a href="@Url.Action("GetCalculationExcel")?id=@Model.Id" target="_blank" class="btn btn-sm btn-primary"><i class="fa fa-file-excel-o"></i> скачать расчет</a>
                </li>
                <li class=" pull-right">
                    <a id="displayCalcs" class="btn btn-sm btn-info">показать расчеты</a>
                </li>
            </ul>
        </div>
        <hr/>
            <ul class="list-inline">
                <li style="position: relative;"><strong>Оборудование</strong>
                    <a class="btn btn-link btn-sm" style="position: absolute; bottom: -18px; left: -5px;" data-toggle="collapse" data-target="#positionTableContainer">скрыть/показать</a>
                </li>
                <li>
                    <span id="totalPositions" class="text-info h4 bold">0</span> / <span id="calcedPositions" class="text-success h4 bold">0</span> / <span id="notCalcedPositions" class="text-danger h4 bold">0</span>
                </li>
                <li>
                    <input name="positionCalcFilter" type="radio" value="" checked="checked"/> все
                    <input name="positionCalcFilter" type="radio" value="1"/> расчитанные
                    <input name="positionCalcFilter" type="radio" value="0"/> нерасчитанные
                </li>
                <li class="pull-right">
                    <button id="deleteCheckedPositions" class="btn btn-danger btn-xs"><i class="fa fa-trash"></i> удалить отмеченные</button>
                </li>
            </ul>
        <div id="positionTableContainer" class="collapse in" style="overflow-x: scroll;">
            <table id="positionTable" class="table small table-bordered">
                <thead>
                @Html.Partial("PositionHeader")
                </thead>
                <tbody id="positionsContainer"></tbody>
            </table>
            <a name="addPosition" class="btn btn-sm btn-warning"><i class="fa fa-plus"></i> добавить оборудование</a>
        </div>
        
        <hr />
        <ul class="list-inline">
            <li style="position: relative;"><strong>Работы</strong>
                <a class="btn btn-link btn-sm" style="position: absolute; bottom: -18px; left: -5px;" data-toggle="collapse" data-target="#workTableContainer">скрыть/показать</a>
            </li>
            <li>
                <span id="totalWorks" class="text-info h4 bold">0</span> / <span id="calcedWorks" class="text-success h4 bold">0</span> / <span id="notCalcedWorks" class="text-danger h4 bold">0</span>
            </li>
            <li>
                <input name="workCalcFilter" type="radio" value="" checked="checked"/> все
                <input name="workCalcFilter" type="radio" value="1"/> расчитанные
                <input name="workCalcFilter" type="radio" value="0"/> нерасчитанные
            </li>
            <li class="pull-right">
                <button id="deleteCheckedWorks" class="btn btn-danger btn-xs"><i class="fa fa-trash"></i> удалить отмеченные</button>
            </li>
        </ul>
        <div id="workTableContainer" class="collapse in" style="overflow-x: scroll">
            <table id="workTable" class="table small table-bordered">
                <thead>
                @Html.Partial("WorkHeader")
                </thead>
                <tbody id="worksContainer"></tbody>
            </table>
            <a name="addWork" class="btn btn-sm btn-warning"><i class="fa fa-plus"></i> добавить работу</a>
        </div>
    </div>
</div>

<div id="infoModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Информация о проекте №@Model.Id</h4>
            </div>
            <div class="modal-body">
                <div id="infoEditContainer"></div>
            </div>
            @*<div class="modal-footer">
            </div>*@
        </div>
    </div>
</div>

<div id="filesHistoryModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">История файлов проекта №@Model.Id</h4>
            </div>
            <div class="modal-body">
                <div id="filesHistoryContainer"></div>
            </div>
            @*<div class="modal-footer">
                </div>*@
        </div>
    </div>
</div>

<div id="messagesHistoryModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">История переписки проекта №@Model.Id</h4>
            </div>
            <div class="modal-body">
                <div id="messagesHistoryContainer"></div>
            </div>
            @*<div class="modal-footer">
                </div>*@
        </div>
    </div>
</div>

<div id="historyModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">История изменений статусов проекта №@Model.Id</h4>
            </div>
            <div class="modal-body">
                <div id="historyAllontainer"></div>
            </div>
            @*<div class="modal-footer">
                </div>*@
        </div>
    </div>
</div>

<div id="stateModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title" id="stateModelTitle"></h4>
            </div>
            <div class="modal-body">
                <textarea id="stateModelComment" placeholder="Введите комментарий" class="form-control" rows="3"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Отмена</button>
                <button id="stateModalConfirm" class="btn btn-success">Подтвердить</button>
            </div>
        </div>
    </div>
</div>

<div id="conditionChangeModal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Комментарий для изменения состояния проекта №@Model.Id</h4>
            </div>
            <div class="modal-body">
                <textarea id="conditionChangeModelComment" placeholder="Введите комментарий" class="form-control" rows="3"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Отмена</button>
                <button id="conditionChangeConfirm" class="btn btn-success">Подтвердить</button>
            </div>
        </div>
    </div>
</div>

<script>
    var showCalcs = false;
    $(function() {
        loadCondition();
        $('#projectPlay').click(projectPlay);
        $('#projectPause').click(projectPause);
        $('#projectStop').click(projectStop);
        loadHistory();

        $('#sendMessage').click(sendMessage);
        loadFiles();
        $('#showFilesHistory').click(showFilesHistory);
        loadMessages();

        $('#changeInfo').click(changeInfo);
        $('#showInfo').click(showInfo);
        loadPositions();
        $('[name=addPosition]').click(addPosition);
        loadWorks();
        $('[name=addWork]').click(addWork);
        $('#displayCalcs').click(function() {
            showCalcs = !showCalcs;
            displayCalcs();
        });
        $('#deleteCheckedPositions').click(deleteCheckedPositions);
        $('#positionsCheckAll').click(positionsCheckAll);

        $('#deleteCheckedWorks').click(deleteCheckedWorks);
        $('#worksCheckAll').click(worksCheckAll);

        $('[name="positionCalcFilter"]').click(loadPositions);
        $('[name="workCalcFilter"]').click(loadWorks);
    });

    function worksCheckAll () {
        $('input[name="workCheckbox"]').prop('checked', $('#worksCheckAll').is(':checked'));
    }

    function deleteCheckedWorks() {
        if (!confirm('Вы действительно хотите удалить отмеченные работы?'))return;
        var $this = $(this);
        showSpinnerAppendAndDisable($this);
        var $rows = $('#worksContainer tr[name="work"]:has(input:checked)');
        var ids = [];
        for(var i=0;i<$rows.length;i++) {
            ids.push($($rows[i]).attr('wid'));
        }
        $.ajax({
            url: '@Url.Action("DeleteWorks")',
            method: 'POST',
            contentType:'application/json',
            data: JSON.stringify({ ids: ids }),
            success: function() {
                for(var j=0;j<ids.length;j++) {
                    $('tr[wid=' + ids[j] + ']').remove();
                }
                hideSpinnerAndEnabled($this);
            },
            error: function(data) {
                alert('Ошибка при удалении работ!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function positionsCheckAll() {
        $('input[name="posCheckbox"]').prop('checked', $('#positionsCheckAll').is(':checked'));
    }

    function deleteCheckedPositions() {
        if (!confirm('Вы действительно хотите удалить отмеченное оборудование?'))return;
        var $this = $(this);
        showSpinnerAppendAndDisable($this);
        var $rows = $('#positionsContainer tr[name="pos"]:has(input:checked)');
        var ids = [];
        for(var i=0;i<$rows.length;i++) {
            ids.push($($rows[i]).attr('pid'));
        }
        $.ajax({
            url: '@Url.Action("DeletePositions")',
            method: 'POST',
            contentType:'application/json',
            data: JSON.stringify({ ids: ids }),
            success: function() {
                for(var j=0;j<ids.length;j++) {
                    $('tr[pid=' + ids[j] + ']').remove();
                }
                hideSpinnerAndEnabled($this);
            },
            error: function(data) {
                alert('Ошибка при удалении оборудования!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function setCondition() {
        var $this = $(this);
        var cid = $this.attr('cid');
        var pid = $this.attr('pid');
        $('#conditionChangeModal').modal('show');
        $('#conditionChangeConfirm').click(function () {
            $this = $(this);
            showSpinnerAppendAndDisable($this);
            var comment = $('#conditionChangeModelComment').val();
            $.ajax({
                url: '@Url.Action("ChangeCondition")',
                method: 'POST',
                data: { pid: pid, cid: cid, comment: comment },
                success: function () {
                    $('#conditionChangeModelComment').val('');
                    loadCondition();
                    $('#conditionChangeModal').modal('hide');
                    hideSpinnerAndEnabled($this);
                },
                error:function(data) {
                    alert('Лшибка при изменении состояния!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });
    }

    function loadCondition() {
        var $cont = $('#conditionContainer');
        $cont.html('');
        showSpinner($cont);
        $.ajax({
            url: '@Url.Action("GetIndicatorBig")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                $('[name="project-condition"]').click(setCondition);
                $('[data-toggle="popover"]').popover();
                hideSpinner($cont);
            },
            error:function(data) {
                alert('Ошибка при загрузке состояний проекта!');
                console.log(data);
                hideSpinner($cont);
            }
        });
    }

    function projectStop() {
        $('#stateModal').modal('show');
        $('#stateModelTitle').text('Укажите комментарий для отклонения');
        $('#stateModalConfirm').click(function() {
            var comment = $('#stateModelComment').val();
            if (!comment) {
                alert('Введите комментарий!');
                $('#stateModelComment').focus();
                return;
            }
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            $.ajax({
                url: '@Url.Action("Stop")',
                method: 'POST',
                data: { id: @Model.Id },
                success: function() {
                    location.reload();
                },
                error: function(data) {
                    alert('Ошибка при отклонении проекта!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });
        //if (!confirm('Вы действительно хотите отклонить проект?'))return;
    }

    function projectPause() {
        $('#stateModal').modal('show');
        $('#stateModelTitle').text('Укажите комментарий для приостановки');
        $('#stateModalConfirm').click(function() {
            var comment = $('#stateModelComment').val();
            if (!comment) {
                alert('Введите комментарий!');
                $('#stateModelComment').focus();
                return;
            }
            var $this = $(this);
            showSpinnerAppendAndDisable($this);
            $.ajax({
                url: '@Url.Action("Pause")',
                method: 'POST',
                data: { id: @Model.Id },
                success: function() {
                    location.reload();
                },
                error: function(data) {
                    alert('Ошибка при приостановке проекта!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });
        //if (!confirm('Вы действительно хотите приостановить проект?'))return;
    }

    function projectPlay() {
        var $this = $(this);
        showSpinnerAppendAndDisable($this);
        $.ajax({
            url: '@Url.Action("Play")',
            method: 'POST',
            data: {id:@Model.Id},
            success: function() {
                location.reload();
            },
            error:function(data) {
                alert('Ошибка при запуске проекта!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function loadHistory() {
        var $cont = $('#historyContainer');
        $cont.html('');
        showSpinner($cont);
        $.ajax({
            url: '@Url.Action("GetHistory")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                $('#showAllHistory').click(showAllHistory);
                hideSpinner($cont);
            },
            error:function(data) {
                alert('Ошибка при загрузке истории статусов проекта!');
                console.log(data);
                hideSpinner($cont);
            }
        });
    }

    function showAllHistory() {
        var $this = $(this);
        showSpinnerAppendAndDisable($this);
        var $cont = $('#historyAllontainer');
        $cont.html('');
        showSpinner($cont);
        $('#historyModal').modal('show');
        $.ajax({
            url: '@Url.Action("GetAllHistory")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                hideSpinner($cont);
                hideSpinnerAndEnabled($this);
            },
            error:function(data) {
                alert('Ошибка при загрузке истории статусов!');
                console.log(data);
                hideSpinner($cont);
                hideSpinnerAndEnabled($this);
            }
        });

    }

    function sendMessage() {
        var $this = $(this);
        showSpinnerAppendAndDisable($this);
        var message = $('#message').val();
        if (!message) {
            alert('Введите текст сообщения!');
            $('#message').focus();
            hideSpinnerAndEnabled($this);
            return;
        }

        $.ajax({
            url: '@Url.Action("SendMessage")',
            method:'POST',
            contentType: 'application/json',
            data: JSON.stringify({id: @Model.Id, message:message}),
            success: function() {
                $('#message').val('');
                loadMessages();
                hideSpinnerAndEnabled($this);
            },
            error:function(data) {
                alert('Ошибка при сохранении комментария!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function loadMessages() {
        var $cont = $('#messagesContainer');
        $cont.html('');
        showSpinner($cont);
        $.ajax({
            url: '@Url.Action("GetMessages")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                $('#showMessagesHistory').click(loadMessagesHistory);
                hideSpinner($cont);
            },
            error:function(data) {
                alert('Ошибка при загрузке переписки проекта!');
                console.log(data);
                hideSpinner($cont);
            }
        });
    }

    function loadMessagesHistory() {
        var $this = $(this);
        showSpinnerAppendAndDisable($this);
        var $cont = $('#messagesHistoryContainer');
        $cont.html('');
        showSpinner($cont);
        $('#messagesHistoryModal').modal('show');
        $.ajax({
            url: '@Url.Action("GetMessagesHistory")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                hideSpinner($cont);
                hideSpinnerAndEnabled($this);
            },
            error:function(data) {
                alert('Ошибка при загрузке истории преписки!');
                console.log(data);
                hideSpinner($cont);
                hideSpinnerAndEnabled($this);
            }
        });

    }

    function showFilesHistory() {
        var $this = $(this);
        showSpinnerAppendAndDisable($this);
        var $cont = $('#filesHistoryContainer');
        $cont.html('');
        showSpinner($cont);
        $('#filesHistoryModal').modal('show');
        $.ajax({
            url: '@Url.Action("GetFolderFilesHistory")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                hideSpinner($cont);
                hideSpinnerAndEnabled($this);
            },
            error:function(data) {
                alert('Ошибка при загрузке позиций!');
                console.log(data);
                hideSpinner($cont);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function loadFiles() {
        var $cont = $('#filesContainer');
        $cont.html('');
        showSpinner($cont);
        $.ajax({
            url: '@Url.Action("GetFolders")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                hideSpinner($cont);
            },
            error:function(data) {
                alert('Ошибка при загрузке файлов проекта!');
                console.log(data);
                hideSpinner($cont);
            }
        });
    }

    function showInfo() {
        var $this = $(this);
        showSpinnerAppendAndDisable($this);
        var $cont = $('#infoEditContainer');
        $cont.html('');
        showSpinner($cont);
        $('#infoModal').modal('show');
        $.ajax({
            url: '@Url.Action("GetInfo")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                hideSpinner($cont);
                hideSpinnerAndEnabled($this);

                $('#infoEdit').click(function () {
                    changeInfo();
                });
            },
            error:function(data) {
                alert('Ошибка при загрузке информации о проекте!');
                console.log(data);
                hideSpinner($cont);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function changeInfo() {
        //var $this = $(this);
        //showSpinnerAppendAndDisable($this);

        var $cont = $('#infoEditContainer');
        $cont.html('');
        showSpinner($cont);
        $('#infoModal').modal('show');
        $.ajax({
            url: '@Url.Action("GetEdit")',
            method: 'GET',
            data: {id:@Model.Id},
            success: function(html) {
                $cont.html(html);
                hideSpinner($cont);
                //hideSpinnerAndEnabled($this);
            },
            error:function(data) {
                alert('Ошибка при загрузке позиций!');
                console.log(data);
                hideSpinner($cont);
                //hideSpinnerAndEnabled($this);
            }
        });
    }

    function displayCalcs(display) {
        if (display != null) {
            showCalcs = display;
        }

        if (showCalcs == false) {
            $('[name="btnEditCalcCancel"]').click();
        }

        if (showCalcs) {
            $('[calcol="calcol"]').show();
            $('#displayCalcs').text('скрыть расчеты');
            $('#positionTable').width(2500);
            $('#workTable').width(2000);

        } else {
            $('[calcol="calcol"]').hide();
            $('#displayCalcs').text('показать расчеты');
            $('#positionTable').width('');
            $('#workTable').width('');
        }
    }


    function loadWorks() {
        loadWorkCounts();
        var calced = $('[name="workCalcFilter"]:checked').val();
        if (calced == 'all')calced = null;
        if (calced == '1')calced = true;
        if (calced == '0')calced = false;

        var $cont = $('#worksContainer');
        $cont.html('');
        showSpinner($cont);
        $.ajax({
            url: '@Url.Action("GetWorks")',
            method: 'GET',
            data:{id:@Model.Id, calced:calced},
            success: function(html) {
                $cont.html(html);
                displayCalcs();
                hideSpinner($cont);
                initWorkBtns();
                initWorkCalcBns();
            },
            error: function(data) {
                alert('Ошибка при загрузке позиций!');
                console.log(data);
                hideSpinner($cont);
            }
        });
    }

    function loadWorkCounts() {
        $.ajax({
            url: '@Url.Action("GetWorkCounts")',
            method: 'POST',
            data:{id:@Model.Id},
            success: function(data) {
                $('#totalWorks').text(data.total);
                $('#calcedWorks').text(data.calced);
                $('#notCalcedWorks').text(data.notCalced);
            },
            error: function(data) {
                alert(data);
                console.log(data);
            }
        });
    }

    function addWork() {
        var $this = $(this);

        showSpinnerAppendAndDisable($this);
        $.ajax({
            url: '@Url.Action("GetWorkNew")',
            method: 'GET',
            data:{id:0},
            success: function(html) {
                var $cont = $('#worksContainer');
                $cont.append(html);
                displayCalcs();
                hideSpinnerAndEnabled($this);
                $('[name="WorkName"]').focus();
                $('[name="createWork"]').click(saveNewWork);
                $('[name="createWorkCancel"]').click(createWorkCancel);
            },
            error: function(data) {
                alert('Ошибка при добавлении работы!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function createWorkCancel() {
        $(this).closest('tr').remove();
    }

    function getWorkValues($row) {
        if (!$row) return;

        var WorkName = $row.find('[name=WorkName]').val();
        var WorkQuantity = $row.find('[name=WorkQuantity]').val();
        var WorkQuantityUnit = $row.find('[name=WorkQuantityUnit]:checked').val();
        var Calculator = $row.find('[name=Calculator]').val();

        var model = {
            ProjectId: @Model.Id,
            Name: WorkName,
            Quantity: WorkQuantity,
            QuantityUnitId: WorkQuantityUnit,
            CalculatorSid: Calculator
        };
        return model;
    }

    function saveNewWork() {
        var $this = $(this);
        var $row = $this.closest('tr');

        showSpinnerAppendAndDisable($this);
        $.ajax({
            url: '@Url.Action("CreateWork")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(getWorkValues($row)),
            success: function(data) {
                hideSpinnerAndEnabled($this);
                $.ajax({
                    url: '@Url.Action("GetWork")',
                    method: 'GET',
                    data: { id: data.id },
                    success: function(html) {
                        $row.replaceWith(html);
                        displayCalcs();
                        initWorkBtns($('#work-' + data.id));
                    },
                    error: function(data) {
                        alert('Ошибка при получении работы!');
                        console.log(data);
                    }
                });
            },
            error: function(data) {
                alert('Ошибка при создании работы!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function initWorkCalcBns($container) {
        if (!$container) $container = $('#worksContainer');

        $('[name="btnDeleteCalc"]', $container).click(function() {
            if (!confirm('Вы уверены что хотите удалить расчет?'))return;
            var $this = $(this);
            var $row = $this.closest('tr');
            var wid = $row.attr('wid');
            var cpid = $this.attr('cpid');
            showSpinnerAppendAndDisable($this);
            $.ajax({
                url: '@Url.Action("DeleteWorkCalculation")',
                method: 'POST',
                data: { id: cpid },
                success: function() {
                    var calcs = $('td[name="calc"][cpid="' + cpid + '"]');
                    calcs.addClass('calcDeleted');
                    calcs.find('.btn').remove();
                    hideSpinnerAndEnabled($this);
                    calcountChange($('#work-' + wid), -1);

                },
                error: function() {
                    hideSpinnerAndEnabled($this);
                }
            });
        });

        $('[name="btnEditCalc"]', $container).click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            var wid = $row.attr('wid');
            var cpid = $this.attr('cpid');
            showSpinnerAppendAndDisable($this);

            $.ajax({
                url: '@Url.Action("GetWorkCalculationEdit")',
                method: 'POST',
                data: { id: cpid },
                success: function(html) {
                    var $calcs = $('td[name="calc"][cpid="' + cpid + '"]');
                    var parentRow = $calcs.parent('tr');
                    $calcs.remove();
                    parentRow.append(html);
                    initWorkCalcBns($row);
                    //displaySecCol();
                    hideSpinnerAndEnabled($this);
                    //setB2bPrice($row);
                },
                error: function() {
                    alert('Ошибка при загрузке формы редактирования расчета!');
                    hideSpinnerAndEnabled($this);
                }
            });
        });

        $('[name="btnSaveCalc"]', $container).click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            var wid = $row.attr('wid');
            var cpid = $this.attr('cpid');

            var ExecutorName = $('[name=calcExecutorName]', $row).val();
            var Name = $('[name=calcName]', $row).val().trim();
            var Cost = $('[name=calcCost]', $row).val().trim().replace(".", ",");
            var CurrencyId = $('[name=calcCurrency]:checked', $row).val();
            var ExecutionTimeId = $('[name=calcExecutionTimeId]', $row).val();
            var ExecutionTime = $('[name=calcExecutionTime]', $row).val();
            var Comment = $('[name=calcComment]', $row).val();

            //if (!Name) {
            //    alert('Укажите наименование либо замена!');
            //    return;
            //}
            //if (!PriceUsd && !PriceEur && !PriceEurRicoh && !PriceRubl) {
            //    alert('Укажите цену!');
            //    return;
            //}
            //if (!DeliveryTime) {
            //    alert('Укажите срок поставки!');
            //    return;
            //}
            showSpinnerAppendAndDisable($this);
            $.ajax({
                url: '@Url.Action("SaveWorkCalculation")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ Id: cpid, WorkId: wid, ExecutorName: ExecutorName, Name: Name, Cost: Cost, CurrencyId: CurrencyId,  ExecutionTimeId: ExecutionTimeId, ExecutionTime: ExecutionTime, Comment: Comment }),
                success: function(data) {
                    $.ajax({
                        url: '@Url.Action("GetWorkCalculation")',
                        method: 'GET',
                        data: { id: data.id },
                        success: function(html) {
                            $row.find('[name="calc"]').remove();
                            $row.append(html);
                            initWorkCalcBns($row);
                            hideSpinnerAndEnabled($this);
                            if (cpid == null || cpid <= 0) {
                                calcountChange($('#work-' + wid), +1);
                            }
                            //setB2bPrice($row);
                        },
                        error: function() {
                            hideSpinnerAndEnabled($this);
                        }
                    });
                },
                error: function() {
                    alert('Ошибка при сохранении расчета!');
                    hideSpinnerAndEnabled($this);
                }
            });

        });

        $('[name="btnEditCalcCancel"]', $container).click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            var cpid = $this.attr('cpid');
            showSpinnerAppendAndDisable($this);
            if ($row.attr('name') == 'work' || cpid > 0) {
                $.ajax({
                    url: '@Url.Action("GetWorkCalculation")',
                    method: 'POST',
                    data: { id: cpid },
                    success: function(html) {
                        $row.find('[name="calc"]').remove();
                        $row.append(html);
                        //displaySecCol();
                        initWorkCalcBns($row);
                        hideSpinnerAndEnabled($this);
                    },
                    error: function() {
                        hideSpinnerAndEnabled($this);
                    }
                });
            } else {
                var id = $row.attr('wid');
                var poss = $('#pos-' + id).find('[name="work"]');
                var curRowSpan = poss.attr('rowspan');
                var newRowSpan = parseInt(curRowSpan) - 1;
                poss.attr('rowspan', newRowSpan);
                $row.remove();
            }
        });
    }

    function initWorkBtns($cont) {
        if (!$cont)$cont = $('#worksContainer');

        $('[name="addCalc"]', $cont).click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('wid');
            $.ajax({
                url: '@Url.Action("GetWorkCalculationEdit")',
                method: 'GET',
                data: { id: 0 },
                success: function(html) {
                    var $nullCalcs = $('[cpid="null"]', $row);

                    if ($nullCalcs.length > 0) {
                        $nullCalcs.remove();
                        $row.append(html);
                        initWorkCalcBns($row);
                        $('[name="calcExecutorName"]', $row).focus();
                    } else {
                        var poss = $('[name="work"]', $row);
                        var curRowSpan = poss.attr('rowspan');
                        var newRowSpan = parseInt(curRowSpan) + 1;
                        poss.attr('rowspan', newRowSpan);
                        var $newRow = $('<tr wid="' + id + '">' + html + '</tr>');
                        $('tr[wid=' + id + ']').last().after($newRow);
                        initWorkCalcBns($newRow);
                        $('[name="calcExecutorName"]', $newRow).focus();
                    }
                    displayCalcs(true);


                    hideSpinnerAndEnabled($this);
                },
                error: function(data) {
                    alert('Ошибка при добавлении расчета!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });

        });

        $('[name="editWork"]', $cont).click(function() {
            displayCalcs(false);
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('wid');
            $.ajax({
                url: '@Url.Action("GetWorkEdit")',
                method: 'GET',
                data: { id: id },
                success: function(html) {
                    var $rows = $('tr[wid=' + id + ']');
                    $rows.last().after(html);
                    $rows.remove();
                    displayCalcs();
                    hideSpinnerAndEnabled($this);
                    initWorkBtns($('#work-' + id));
                },
                error: function(data) {
                    alert('Ошибка при получении работы!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });

        $('[name="deleteWork"]', $cont).click(function() {
            if (!confirm('Вы действительно хотите удалить работу?'))return;
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('wid');
            $.ajax({
                url: '@Url.Action("DeleteWork")',
                method: 'POST',
                data: { id: id },
                success: function(html) {
                    var $rows = $('tr[wid=' + id + ']');
                    $rows.remove();
                },
                error: function(data) {
                    alert('Ошибка при получении работы!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });

        $('[name=cancelWork]').click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('wid');
            var model = getPositionValues($row);
            model.Id = id;
            $.ajax({
                url: '@Url.Action("GetWork")',
                method: 'GET',
                data: { id: id },
                success: function(html) {
                    var $rows = $('tr[wid=' + id + ']');
                    $rows.last().after(html);
                    $rows.remove();
                    initWorkBtns($('#work-' + id));
                    displayCalcs();
                    hideSpinnerAndEnabled($this);
                },
                error: function(data) {
                    alert('Ошибка при получении позиции!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });

        $('[name=saveWork]', $cont).click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('wid');
            var model = getWorkValues($row);
            model.Id = id;
            $.ajax({
                url: '@Url.Action("SaveWork")',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(model),
                success: function() {
                    hideSpinnerAndEnabled($this);
                    $.ajax({
                        url: '@Url.Action("GetWork")',
                        method: 'GET',
                        data: { id: id },
                        success: function(html) {
                            var $rows = $('tr[wid=' + id + ']');
                            $rows.last().after(html);
                            $rows.remove();
                            displayCalcs();
                            initWorkBtns($('#work-' + id));
                        },
                        error: function(data) {
                            alert('Ошибка при получении работы!');
                            console.log(data);
                        }
                    });
                },
                error: function(data) {
                    alert('Ошибка при сохранении работы!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });
    }

    @*Оборудование*@

    function loadPositions() {
        loadPositionCounts();
        var calced = $('[name="positionCalcFilter"]:checked').val();
        if (calced == 'all')calced = null;
        if (calced == '1')calced = true;
        if (calced == '0')calced = false;

        var $cont = $('#positionsContainer');
        $cont.html('');
        showSpinner($cont);
        $.ajax({
            url: '@Url.Action("GetPositions")',
            method: 'GET',
            data:{id:@Model.Id, calced:calced},
            success: function(html) {
                $cont.html(html);
                displayCalcs();
                hideSpinner($cont);
                initPositionBtns();
                initPosCalcBns();
            },
            error: function(data) {
                alert('Ошибка при загрузке позиций!');
                console.log(data);
                hideSpinner($cont);
            }
        });
    }

    function loadPositionCounts() {
        $.ajax({
            url: '@Url.Action("GetPositionCounts")',
            method: 'POST',
            data:{id:@Model.Id},
            success: function(data) {
                $('#totalPositions').text(data.total);
                $('#calcedPositions').text(data.calced);
                $('#notCalcedPositions').text(data.notCalced);
            },
            error: function(data) {
                alert(data);
                console.log(data);
            }
        });
    }

    function addPosition() {
        var $this = $(this);

        showSpinnerAppendAndDisable($this);
        $.ajax({
            url: '@Url.Action("GetPositionNew")',
            method: 'GET',
            data:{id:0},
            success: function(html) {
                var $cont = $('#positionsContainer');
                $cont.append(html);
                displayCalcs();
                hideSpinnerAndEnabled($this);
                $('[name="PositionCatalogNumber"]').focus();
                $('[name="createPosition"]').click(saveNewPosition);
                $('[name="createPositionCancel"]').click(createPositionCancel);
            },
            error: function(data) {
                alert('Ошибка при добавлении позиции!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function createPositionCancel() {
        $(this).closest('tr').remove();
    }

    function getPositionValues($row) {
        if (!$row) return;

        var PositionCatalogNumber = $row.find('[name=PositionCatalogNumber]').val();
        var PositionName = $row.find('[name=PositionName]').val();
        var PositionVendor = $row.find('[name=PositionVendor]').val();
        var PositionQuantity = $row.find('[name=PositionQuantity]').val();
        var PositionQuantityUnit = $row.find('[name=PositionQuantityUnit]:checked').val();
        var Calculator = $row.find('[name=Calculator]').val();

        var model = {
            ProjectId: @Model.Id,
            CatalogNumber: PositionCatalogNumber,
            Name: PositionName,
            Vendor: PositionVendor,
            Quantity: PositionQuantity,
            QuantityUnitId: PositionQuantityUnit,
            CalculatorSid: Calculator
        };
        return model;
    }

    function saveNewPosition() {
        var $this = $(this);
        var $row = $this.closest('tr');

        showSpinnerAppendAndDisable($this);
        $.ajax({
            url: '@Url.Action("CreatePosition")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(getPositionValues($row)),
            success: function(data) {
                hideSpinnerAndEnabled($this);
                $.ajax({
                    url: '@Url.Action("GetPosition")',
                    method: 'GET',
                    data: { id: data.id },
                    success: function(html) {
                        $row.replaceWith(html);
                        displayCalcs();
                        initPositionBtns($('#pos-' + data.id));
                    },
                    error: function(data) {
                        alert('Ошибка при получении позиции!');
                        console.log(data);
                    }
                });
            },
            error: function(data) {
                alert('Ошибка при создании позиции!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
    }

    function initPosCalcBns($container) {
        if (!$container) $container = $('#positionsContainer');

        $('[name="btnDeleteCalc"]', $container).click(function() {
            if (!confirm('Вы уверены что хотите удалить расчет?'))return;
            var $this = $(this);
            var $row = $this.closest('tr');
            var pid = $row.attr('pid');
            var cpid = $this.attr('cpid');
            showSpinnerAppendAndDisable($this);
            $.ajax({
                url: '@Url.Action("DeleteCalculation")',
                method: 'POST',
                data: { id: cpid },
                success: function() {
                    var calcs = $('td[name="calc"][cpid="' + cpid + '"]');
                    calcs.addClass('calcDeleted');
                    calcs.find('.btn').remove();
                    hideSpinnerAndEnabled($this);
                    calcountChange($('#pos-' + pid), -1);

            },
            error: function() {
                hideSpinnerAndEnabled($this);
            }
        });
    });

    $('[name="btnEditCalc"]', $container).click(function() {
        var $this = $(this);
        var $row = $this.closest('tr');
        var pid = $row.attr('pid');
        var cpid = $this.attr('cpid');
        showSpinnerAppendAndDisable($this);

        $.ajax({
            url: '@Url.Action("GetCalculationEdit")',
            method: 'POST',
            data: { id: cpid },
            success: function(html) {
                var $calcs = $('td[name="calc"][cpid="' + cpid + '"]');
                var parentRow = $calcs.parent('tr');
                $calcs.remove();
                parentRow.append(html);
                initPosCalcBns($row);
                //displaySecCol();
                hideSpinnerAndEnabled($this);
                //setB2bPrice($row);
            },
            error: function() {
                alert('Ошибка при загрузке формы редактирования расчета!');
                hideSpinnerAndEnabled($this);
            }
        });
    });

    $('[name="btnSaveCalc"]', $container).click(function() {
        var $this = $(this);
        var $row = $this.closest('tr');
        var pid = $row.attr('pid');
        var cpid = $this.attr('cpid');

        var CatalogNumber = $('[name=calcCatalogNumber]', $row).val();
        var Name = $('[name=calcName]', $row).val().trim();
        var Cost = $('[name=calcCost]', $row).val().trim().replace(".", ",");
        var CurrencyId = $('[name=calcCurrency]:checked', $row).val();
        var RecomendedPrice = $('[name=calcRecomendedPrice]', $row).val().trim().replace(".", ",");
        var Provider = $('[name=calcProvider]', $row).val();
        var DeliveryTimeId = $('[name=calcDeliveryTime]', $row).val();
        var ProtectionFactId = $('[name=calcProtectFact]', $row).val();
        var ProtectionFactCondition = $('[name=calcProtectCondition]', $row).val();
        var Comment = $('[name=calcComment]', $row).val();

        //if (!Name) {
        //    alert('Укажите наименование либо замена!');
        //    return;
        //}
        //if (!PriceUsd && !PriceEur && !PriceEurRicoh && !PriceRubl) {
        //    alert('Укажите цену!');
        //    return;
        //}
        //if (!DeliveryTime) {
        //    alert('Укажите срок поставки!');
        //    return;
        //}
        showSpinnerAppendAndDisable($this);
        $.ajax({
            url: '@Url.Action("SaveCalculation")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ Id: cpid, PositionId: pid, CatalogNumber: CatalogNumber, Name: Name, Cost: Cost, CurrencyId: CurrencyId, Provider: Provider, DeliveryTimeId: DeliveryTimeId, ProtectionFactId: ProtectionFactId, ProtectionFactCondition: ProtectionFactCondition, Comment: Comment, RecomendedPrice: RecomendedPrice }),
            success: function(data) {
                $.ajax({
                    url: '@Url.Action("GetCalculation")',
                    method: 'GET',
                    data: { id: data.id },
                    success: function(html) {
                        $row.find('[name="calc"]').remove();
                        $row.append(html);
                        initPosCalcBns($row);
                        hideSpinnerAndEnabled($this);
                        if (cpid == null || cpid <= 0) {
                            calcountChange($('#pos-' + pid), +1);
                        }
                        //setB2bPrice($row);
                    },
                    error: function() {
                        hideSpinnerAndEnabled($this);
                    }
                });
            },
            error: function() {
                alert('Ошибка при сохранении расчета!');
                hideSpinnerAndEnabled($this);
            }
        });

    });

    $('[name="btnEditCalcCancel"]', $container).click(function() {
        var $this = $(this);
        var $row = $this.closest('tr');
        var cpid = $this.attr('cpid');
        showSpinnerAppendAndDisable($this);
        if ($row.attr('name') == 'pos' || cpid > 0) {
            $.ajax({
                url: '@Url.Action("GetCalculation")',
                method: 'POST',
                data: { id: cpid, ClaimType:'@ViewBag.ClaimType' },
                success: function(html) {
                    $row.find('[name="calc"]').remove();
                    $row.append(html);
                    //displaySecCol();
                    initPosCalcBns($row);
                    hideSpinnerAndEnabled($this);
                },
                error: function() {
                    hideSpinnerAndEnabled($this);
                }
            });
        } else {
            var id = $row.attr('pid');
            var poss = $('#pos-' + id).find('[name="pos"]');
            var curRowSpan = poss.attr('rowspan');
            var newRowSpan = parseInt(curRowSpan) - 1;
            poss.attr('rowspan', newRowSpan);
            $row.remove();
        }
    });
    }

    function calcountChange($row, val) {
        var $elem = $row.find('[name="calcount"]');
        var curCount = $elem.text();
        $elem.text(parseInt(curCount) + val);
    }

    function initPositionBtns($cont) {
        if (!$cont)$cont = $('#positionsContainer');

        $('[name="addCalc"]', $cont).click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('pid');
            $.ajax({
                url: '@Url.Action("GetCalculationEdit")',
                method: 'GET',
                data: { id: 0 },
                success: function(html) {
                    var $nullCalcs = $('[cpid="null"]', $row);

                    if ($nullCalcs.length > 0) {
                        $nullCalcs.remove();
                        $row.append(html);
                        initPosCalcBns($row);
                        $('[name="calcCatalogNumber"]', $row).focus();
                    } else {
                        var poss = $('[name="pos"]', $row);
                        var curRowSpan = poss.attr('rowspan');
                        var newRowSpan = parseInt(curRowSpan) + 1;
                        poss.attr('rowspan', newRowSpan);
                        var $newRow = $('<tr pid="' + id + '">' + html + '</tr>');
                        $('tr[pid=' + id + ']').last().after($newRow);
                        initPosCalcBns($newRow);
                        $('[name="calcCatalogNumber"]', $newRow).focus();
                    }
                    displayCalcs(true);


                    hideSpinnerAndEnabled($this);
                },
                error: function(data) {
                    alert('Ошибка при добавлении расчета!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });

        });

        $('[name="editPosition"]', $cont).click(function() {
            displayCalcs(false);
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('pid');
            $.ajax({
                url: '@Url.Action("GetPositionEdit")',
                method: 'GET',
                data: { id: id },
                success: function(html) {
                    var $rows = $('tr[pid=' + id + ']');
                    $rows.last().after(html);
                    $rows.remove();
                    displayCalcs();
                    hideSpinnerAndEnabled($this);
                    initPositionBtns($('#pos-' + id));
                },
                error: function(data) {
                    alert('Ошибка при получении позиции!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });

        $('[name="deletePosition"]', $cont).click(function() {
            if (!confirm('Вы действительно хотите удалить позицию?'))return;
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('pid');
            $.ajax({
                url: '@Url.Action("DeletePosition")',
                method: 'POST',
                data: { id: id },
                success: function(html) {
                    var $rows = $('tr[pid=' + id + ']');
                    $rows.remove();
                },
                error: function(data) {
                    alert('Ошибка при получении позиции!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });

        $('[name=cancelPosition]').click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('pid');
            var model = getPositionValues($row);
            model.Id = id;
            $.ajax({
                url: '@Url.Action("GetPosition")',
                method: 'GET',
                data: { id: id },
                success: function(html) {
                    var $rows = $('tr[pid=' + id + ']');
                    $rows.last().after(html);
                    $rows.remove();
                    initPositionBtns($('#pos-' + id));
                    displayCalcs();
                    hideSpinnerAndEnabled($this);
                },
                error: function(data) {
                    alert('Ошибка при получении позиции!');
                    console.log(data);
                    hideSpinnerAndEnabled($this);
                }
            });
        });

        $('[name=savePosition]', $cont).click(function() {
            var $this = $(this);
            var $row = $this.closest('tr');
            showSpinnerAppendAndDisable($this);
            var id = $row.attr('pid');
            var model = getPositionValues($row);
            model.Id = id;
            $.ajax({
            url: '@Url.Action("SavePosition")',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(model),
            success: function() {
                hideSpinnerAndEnabled($this);
                $.ajax({
                    url: '@Url.Action("GetPosition")',
                    method: 'GET',
                    data: { id: id },
                    success: function(html) {
                        var $rows = $('tr[pid=' + id + ']');
                        $rows.last().after(html);
                        $rows.remove();
                        displayCalcs();
                        initPositionBtns($('#pos-' + id));
                    },
                    error: function(data) {
                        alert('Ошибка при получении позиции!');
                        console.log(data);
                    }
                });
            },
            error: function(data) {
                alert('Ошибка при сохранении позиции!');
                console.log(data);
                hideSpinnerAndEnabled($this);
            }
        });
        });
    }


</script>